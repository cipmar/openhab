rule "irrigation on/off"
when
    Time cron "0/10 * * * * ? *"
then
    val startStopZone = [ GenericItem item_zone, GenericItem item_zone_start_time, GenericItem item_zone_run_time |

    val start_time = if (item_zone_start_time.state == NULL) 0 else item_zone_start_time.state as Number;
    val state = item_zone.state;
    val run_time = item_zone_run_time.state as Number

    if (state == ON) {

        if (start_time == 0) {

        // zone is running, setting the start time

        val start_timestamp = now.toInstant.toEpochMilli
        item_zone_start_time.postUpdate(start_timestamp);
        logInfo(item_zone.label, "zone has started, start time: {}, run time: {} min", start_timestamp.toString, run_time.toString);
        } 

        if (start_time > 0) {

        // zone in running, start time is set

        val stop_timestamp = start_time + run_time * 60 * 1000;

        if (now.toInstant.toEpochMilli >= stop_timestamp) {

            // zone should be stopped

            item_zone.sendCommand(OFF);
            item_zone_start_time.postUpdate(0);
            logInfo(item_zone.label, "zone turned off");
        } else {
            val diff = (stop_timestamp - now.toInstant.toEpochMilli) / 1000 / 60;
            logInfo(item_zone.label, "zone is still running, remaining time: {} min", diff.toString);
        }
        }

    }

    if (state == OFF) {

        // zone is turned off

        if (start_time > 0) {
            item_zone_start_time.postUpdate(0);
            logInfo(item_zone.label, "zone stopped, set start time to 0");
        }
    }  
    ]

    startStopZone.apply(Irrigation_Switch0, zone_1_start_time,   zone_1_run_time);
    startStopZone.apply(Irrigation_Switch1, zone_2_3_start_time, zone_2_3_run_time);
    startStopZone.apply(Irrigation_Switch2, zone_4_start_time,   zone_4_run_time);
    startStopZone.apply(Irrigation_Switch3, zone_5_start_time,   zone_5_run_time);
end